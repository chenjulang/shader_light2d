{
  "ver": "1.0.15",
  "uuid": "c2657391-9a93-48cb-abba-cd91b3703145",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\n#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 uv0;\nvoid main () {\n    vec4 pos = cc_matViewProj * vec4(a_position, 1);\n    gl_Position = pos;\n    uv0 = a_uv0;\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#define TWO_PI 6.28318530718\n#define PI 3.141592653\n\nuniform vec3 iResolution;\nuniform float time;\nuniform sampler2D texture;\nuniform vec4 color;\nvarying vec2 uv0;\n\nfloat line(float x,float k,float b){\n  return k*x+b;\n}\nint Cross(vec2 point1,vec2 point2,vec2 point3,vec2 point4){\n  vec2 temp = point2-point1;\n  float k = temp.y/temp.x;\n  float b = point2.y-point2.x*k;\n  vec2 temp2 = point4-point3;\n  float k2 = temp2.y/temp2.x;\n  float b2 = point4.y-point4.x*k2;\n\n  float h1 = point3.y- line(point3.x,k,b);\n  float h2 = point4.y-line(point4.x,k,b);\n  float h3 = point1.y-line(point1.x,k2,b2);\n  float h4 = point2.y-line(point2.x,k2,b2);\n  if(h1*h2<=0.&&h3*h4<=0.){\n    return 1;\n  }else{\n    return 0;\n  }\n}\n\n  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float iTime = time;\n    vec2 uv = vec2(uv0.x,1.-uv0.y);\n    \n    \n    \n    uv*=1.;\n    vec3 col = vec3(.0);\n     vec2 center = vec2(.5,.6);\n    \n\n    vec2 point1 = vec2(.3,.3);\n    vec2 point2 = vec2(.6,.31);\n\n    vec2 point3 = vec2(.1,.1);\n    vec2 point4 = vec2(.7,.2);\n  \n    vec2 pointsArr[4];\n    pointsArr[0]=point1;\n    pointsArr[1]=point2;\n    pointsArr[2]=point3;\n    pointsArr[3]=point4;\n\n    int black = 0;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    for(int i=0;i<4;i++){\n      for(int j=0;j<4;j++){\n        if(j>i){\n              if(Cross(uv,center,pointsArr[i],pointsArr[j])==1){\n                black =1;\n              }\n        }\n        else{};\n      }\n    }\n\n    \n\n    \n\n    float len = length(uv-center);\n    float res = 1. - smoothstep(.0,.5,len);\n\n    res -= float(black)*.9;\n    col = vec3(res);\n    fragColor = vec4(col,1.0);\n}\n\nvoid main () {\n  mainImage(gl_FragColor,uv0);\n}\n\n\n"
    }
  ],
  "subMetas": {}
}