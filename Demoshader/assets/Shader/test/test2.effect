// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    color: {
      type: color4
      displayName:'颜色'
      value: [1, 1, 1, 1]
    }
    time:{
    type:float,
    value:.0
    }
    iResolution:{
      type:vec3,
      displayName:'分辨率'
      value:[1280,720,0]
    }
  }
%}

%% vs {

precision highp float;

#define PI 3.14159265359
#define TWOPI 6.28318530718

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute vec2 a_uv0;
varying vec2 uv0;
void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
}

}

%% fs {

precision highp float;

#define TWO_PI 6.28318530718
#define PI 3.141592653

uniform vec3 iResolution;
uniform float time;
uniform sampler2D texture;
uniform vec4 color;
varying vec2 uv0;

#define LOOP_COUNT_I 64
#define LOOP_COUNT_F 64.0

#define STEPS 3
//#define LIGHT_SPEED 1.5
#define LIGHT_SPEED .5
#define HARDNESS 2.0

struct ray {
	vec2 t;
	vec2 p;
	vec2 d;
};

float scene (in vec2 p) {
  float iTime = time;//兼容变量
  //vec2 iMouse = vec2((sin(time)+1.)*1280.,(cos(time)+1.)*720.)/3.;//兼容变量

	p -= vec2 (250,250);
	
	float sn = sin (iTime / 2.0);
	float cs = cos (iTime / 2.0);
  sn=1.;cs=1.;
	
	float f1 = dot (vec2 (sn,-cs), p);
	float f2 = dot (vec2 (cs, sn), p);
	float f = max (f1*f1, f2*f2);
	
	//p -= iMouse.xy / iResolution.yy * vec2 (500, 500) - vec2 (400,250);
	//f = min (f, dot (p, p) * 2.0);
	
	return 1000.0 / (f + 1000.0);
}

ray newRay (in vec2 origin, in vec2 target) {
	ray r;
	
	r.t = target;
	r.p = origin;
	r.d = (target - origin) / float (STEPS);
	
	return r;
}
//d单位距离长度向量，p为uv位置，t为灯光位置

void rayMarch (inout ray r) {
	r.p += r.d * clamp (HARDNESS - scene (r.p) * HARDNESS * 2.0, 0.0, LIGHT_SPEED);
}

vec3 light (in ray r, in vec3 color) {
	return color / (dot (r.p, r.p) + color);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
  float iTime = time;//兼容变量
  vec2 uv = vec2(uv0.x,1.-uv0.y);
  //uv -=.5;
  //uv +=.2;
  uv*=1.;
  uv *= vec2(1280.,720.);
	
	ray r0 = newRay (uv, vec2 (0, 0));
	for (int i = 0; i < STEPS; i++) {
		rayMarch (r0);
	}
	
	r0.p -= r0.t;
	vec3 light1 = light (r0, vec3 (0.3, 0.2, 0.1) * 20000.0);
	
	float f = clamp (scene (uv) * 200.0 - 100.0, 0.0, 3.0);
	f = 0.;

	fragColor = vec4 ((light1 ) * (1. + f), 1.0);
}

void main () {
  mainImage(gl_FragColor,uv0);
}

}
