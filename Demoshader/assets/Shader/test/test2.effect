// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    color: {
      type: color4
      displayName:'颜色'
      value: [1, 1, 1, 1]
    }
    time:{
    type:float,
    value:.0
    }
    iResolution:{
      type:vec3,
      displayName:'分辨率'
      value:[1280,720,0]
    }
  }
%}

%% vs {

precision highp float;

#define PI 3.14159265359
#define TWOPI 6.28318530718

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute vec2 a_uv0;
varying vec2 uv0;
void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
}

}

%% fs {

precision highp float;

#define TWO_PI 6.28318530718
#define PI 3.141592653

uniform vec3 iResolution;
uniform float time;
uniform sampler2D texture;
uniform vec4 color;
varying vec2 uv0;

float line(float x,float k,float b){
  return k*x+b;
}
int Cross(vec2 point1,vec2 point2,vec2 point3,vec2 point4){
  vec2 temp = point2-point1;
  float k = temp.y/temp.x;
  float b = point2.y-point2.x*k;////
  vec2 temp2 = point4-point3;
  float k2 = temp2.y/temp2.x;
  float b2 = point4.y-point4.x*k2;

  float h1 = point3.y- line(point3.x,k,b);
  float h2 = point4.y-line(point4.x,k,b);
  float h3 = point1.y-line(point1.x,k2,b2);
  float h4 = point2.y-line(point2.x,k2,b2);
  if(h1*h2<=0.&&h3*h4<=0.){
    return 1;
  }else{
    return 0;
  }
}
// int Inline(vec2 center,vec2 point,vec2 newpoint){//判断某点在直线上（一定距离内）
//   vec2 temp = center-point;
//   float k = temp.y/temp.x;
//   //y=kx+b;
//   float b = point.y-point.x*k;
  
//   float dir = (newpoint.y-point.y);
//   float dir2 = (center.y-point.y);

//   float dir3 = (newpoint.x-point.x);
//   float dir4 = (center.x-point.x);

//   if(abs(newpoint.y-line(newpoint.x,k,b))<0.003 && (dir*dir2<0.&&dir3*dir4<0.)){
//     return 1;
//   }else{
//     return 0;
//   }
// }
// int Aboveline(vec2 center,vec2 point,vec2 newpoint){//判断某点在直线上方
//   vec2 temp = center-point;
//   float k = temp.y/temp.x;
//   //y=kx+b;
//   float b = point.y-point.x*k;

//   float y = newpoint.x*k+b;
//   if(newpoint.y>=y){
//     return 1;
//   }else{
//     return -1;
//   }
// }


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float iTime = time;//兼容变量
    vec2 uv = vec2(uv0.x,1.-uv0.y);
    //float multi = 2.;
    
    //uv-=.1;
    uv*=1.;
    vec3 col = vec3(.0);
     vec2 center = vec2(.5,.6);
    //vec2 center = vec2(sin(time)/3.+.5,cos(time)/3.+.5);

    vec2 point1 = vec2(.3,.3);
    vec2 point2 = vec2(.6,.31);

    vec2 point3 = vec2(.1,.1);
    vec2 point4 = vec2(.7,.2);
  
    vec2 pointsArr[4];
    pointsArr[0]=point1;
    pointsArr[1]=point2;
    pointsArr[2]=point3;
    pointsArr[3]=point4;


    int black = 0;
    // vec2 dir = point2-point1;
    // const int step = 100;
    // for(int i=0;i<step;i++){
    //   vec2 unit = dir/float(step);
    //   vec2 testpoint= point1+unit*float(i);
    // 1对uv        1 对center位置
    // -1          -1
    // int black1 = (Aboveline(point1,point3,uv))*(Aboveline(point1,point3,center))<0?1:0;
    //判断某两点是否在直线的一上一下
    // int black2 = (Aboveline(point2,point4,uv))*(Aboveline(point2,point4,center))<0?1:0;
    // int black3 = (Aboveline(point1,point2,uv))*(Aboveline(point1,point2,center))<0?1:0;
    // black = black1+black2+black3;

    for(int i=0;i<4;i++){
      for(int j=0;j<4;j++){
        if(j>i){
              if(Cross(uv,center,pointsArr[i],pointsArr[j])==1){
                black =1;
              }
        }
        else{};
      }
    }

    


    //cross交叉则为black


    float len = length(uv-center);
    float res = 1. - smoothstep(.0,.5,len);

    res -= float(black)*.9;
    col = vec3(res);
    fragColor = vec4(col,1.0);
}



void main () {
  mainImage(gl_FragColor,uv0);
}

}
