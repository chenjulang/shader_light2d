// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    color: {
      type: color4
      displayName:'颜色'
      value: [1, 1, 1, 1]
    }
    time:{
    type:float,
    value:.0
    }
    iResolution:{
      type:vec3,
      displayName:'分辨率'
      value:[1280,720,0]
    }
  }
%}

%% vs {

precision highp float;

#define PI 3.14159265359
#define TWOPI 6.28318530718

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute vec2 a_uv0;
varying vec2 uv0;
void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
}

}

%% fs {

precision highp float;

#define TWO_PI 6.28318530718
#define PI 3.141592653

uniform vec3 iResolution;
uniform float time;
uniform sampler2D texture;
uniform vec4 color;
varying vec2 uv0;

float sphereSDF(vec2 p, float size) {
	return length(p) - size;
}

float boxSDF(vec2 p, vec2 size) {
	vec2 r = abs(p) - size;
    return min(max(r.x, r.y),0.) + length(max(r,vec2(0,0)));
}

vec3 colormap(float x) {
    float s = sin(x*6.28);
    if (x > 0.) {
    	return vec3(1,1,1.+s)/2.;
    } else {
        return vec3(1,1.+s,1)/2.;
    }
}

void AddObj(inout float dist, inout vec3 color, float d, vec3 c) {
    if (dist > d) {
        dist = d;
        color = c;
    }
}

void scene(in vec2 pos, out vec3 color, out float dist) {
    dist = 1e9; color = vec3(0,0,0);
    AddObj(dist, color, boxSDF(pos - vec2(-3,1), vec2(1,1)), vec3(.6,.8,1.));
    AddObj(dist, color, sphereSDF(pos - vec2(3,1), 1.), vec3(1,.9,.8));
    AddObj(dist, color, sphereSDF(pos - vec2(.3*sin(time),-2), 0.5), vec3(0,.1,0));
    AddObj(dist, color, boxSDF(pos - vec2(0,1), vec2(1.5,0.1)), vec3(.3,.1,.1));
}

void trace(vec2 p, vec2 dir, out vec3 c) {
    for (int i=0;i>-1;i++) {
        float d;
        scene(p, c, d);
        if (d < 1e-3) return;
        if (d > 1e1) break;
        p += dir * d;
    }
    c = vec3(0,0,0);
}

float random (in vec2 _st) {
    return fract(sin(dot(_st.xy,
        vec2(12.9898,78.233)))*
        43758.5453123);
}

#define SAMPLES 128

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
     float iTime = time;//兼容变量
      vec2 uv = vec2(uv0.x,1.-uv0.y);
    uv-=.5;
    uv*=30.;

    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.y*10.;
    vec3 col = vec3(0,0,0);
    for (int i = 0; i < SAMPLES; i++) {
        float t = (float(i) + random(uv+float(i)+iTime)) / float(SAMPLES) * 2. * 3.1415;
        vec3 c;
        trace(uv, vec2(cos(t), sin(t)), c);
        col += c;
    }
    col /= float(SAMPLES);
    // Output to screen
    fragColor = vec4(col*2.,1.0);
}



void main () {
  mainImage(gl_FragColor,uv0);
}

}
