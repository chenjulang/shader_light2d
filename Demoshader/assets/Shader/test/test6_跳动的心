// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    texture2: {
      type: sampler2D
      value: null
    }
    texture3: {
      type: sampler2D
      value: null
    }
    color: {
      type: color4
      displayName:'颜色'
      value: [1, 1, 1, 1]
    }
    time:{
    type:float,
    value:.0
    }
    iResolution:{
      type:vec3,
      displayName:'分辨率'
      value:[1280,720,0]
    }
  }
%}

%% vs {

precision highp float;

#define PI 3.14159265359
#define TWOPI 6.28318530718

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute vec2 a_uv0;
varying vec2 uv0;
void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
}

}

%% fs {

precision highp float;

uniform vec3 iResolution;
uniform float time;
uniform sampler2D texture;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform vec4 color;
varying vec2 uv0;

////////////////////////////////////

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  float iTime = time;//兼容变量
  vec2 uv = vec2(uv0.x,1.-uv0.y);


	vec2 p = (uv-vec2(.5,.5))*3.;
	
    // background color
    vec3 bcol = vec3(1.);

    // animate
    // float tt = mod(iTime,1.5)/1.5;
    // float ss = pow(tt,.2)*0.5 + 0.5;
    // ss = 1.0 + ss*0.5*sin(tt*6.2831*3.0 + p.y*0.5)*exp(-tt*4.0);
    // p *= vec2(0.5,1.5) + ss*vec2(0.5,-0.5);
    p *= sin(time); 

    // shape
	  p.y -= 0.25;
    float a = atan(p.x,p.y)/3.141593;
    float r = length(p);
    float h = abs(a);
    float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);
    
    // color
    vec3 hcol = vec3(1.0,0.,0.);
	
    vec3 col = mix( bcol, hcol, smoothstep( -0.01, 0.01, d-r) );

    fragColor = vec4(col,1.0);
}

void main(){
  mainImage(gl_FragColor,uv0);
}



}
