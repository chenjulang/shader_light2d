// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    color: {
      type: color4
      displayName:'颜色'
      value: [1, 1, 1, 1]
    }
    time:{
    type:float,
    value:.0
    }
    iResolution:{
      type:vec3,
      displayName:'分辨率'
      value:[1280,720,0]
    }
  }
%}

%% vs {

precision highp float;

#define PI 3.14159265359
#define TWOPI 6.28318530718

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute vec2 a_uv0;
varying vec2 uv0;
void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
}

}

%% fs {

precision highp float;

uniform vec3 iResolution;
uniform float time;
uniform sampler2D texture;
uniform vec4 color;
varying vec2 uv0;
#define TWO_PI 6.28318530718
#define PI 3.141592653

vec3 hsb2rgb( in vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0, 
                     0.0, 
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix( vec3(1.0), rgb, c.y);
}

void main(){
    float iTime = time;//兼容变量
    vec2 uv = vec2(uv0.x,1.-uv0.y);//左下为(0,0),右上为(1,1)


    //vec2 st = 2.0*vec2(gl_FragCoord.xy - 0.5*iResolution.xy)/iResolution.y;

    vec3 color = vec3(0.0);

    // Use polar coordinates instead of cartesian
    vec2 toCenter = vec2(0.5)-uv;
    float angle = atan(toCenter.y,toCenter.x*sin(PI*iTime));
    float radius = length(toCenter)*5.;
  	
    // Map the angle (-PI to PI) to the Hue (from 0 to 1)
    // and the Saturation to the radius
    //color = vec3(angle/TWO_PI+0.5,radius,1.0);
    vec3 v3 = vec3((angle/TWO_PI),radius*3.0,1.0);
    color = mix(hsb2rgb(v3),
                vec3(1.,1.,1.),
                smoothstep(.49,.5,radius)
              );

    gl_FragColor = vec4(color,1.0);
}



}
